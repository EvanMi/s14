神奇的双下划线：






Ajax


$.ajax({
    url:'/host',
    type:'POST',
    data:{'k1':123, 'k2':"root"},  #简便方式 data:$('#form_id').serialize(),
    dataType:'JSON',  # 有了这个就不需要JSON.parse(result);
    success:function(result){
        var obj = JSON.parse(result);

    },
    error:function(){
        # 发生了未知的错误的时候执行的，就是主机没有接收到请求的时候
    }
})


ajax 发送列表 data:{'k1':123, 'k2':[1, 2, 3, 4, 5]} 发送列表是None
加上 traditional:True后能够正常发送
$.ajax({
    url:'/host',
    type:'POST',
    traditional:True,
    data:{'k1':123, 'k2':[1, 2, 3, 4, 5]},
    headers:{},
    dataType:'JSON',  # 有了这个就不需要JSON.parse(result);
    success:function(result){
        var obj = JSON.parse(result);

    },
    error:function(){
        # 发生了未知的错误的时候执行的，就是主机没有接收到请求的时候
    }
})

$.get() # type:'GET'
$.getJson()
$.post() # type 'POST'




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 jQuery.ajax(...)

                部分参数：

                        url：请求地址
                       type：请求方式，GET、POST（1.9.0之后用method）
                    headers：请求头
                       data：要发送的数据
                contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")
                      async：是否异步
                    timeout：设置请求超时时间（毫秒）

                 beforeSend：发送请求前执行的函数(全局)
                   complete：完成之后执行的回调函数(全局)
                    success：成功之后执行的回调函数(全局)
                      error：失败之后执行的回调函数(全局)


                    accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型
                   dataType：将服务器端返回的数据转换成指定类型
                                   "xml": 将服务器端返回的内容转换成xml格式
                                  "text": 将服务器端返回的内容转换成普通文本格式
                                  "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。
                                "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式
                                  "json": 将服务器端返回的内容转换成相应的JavaScript对象
                                 "jsonp": JSONP 格式
                                          使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数

                                  如果不指定，jQuery 将自动根据HTTP包MIME信息返回相应类型(an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string

                 converters： 转换器，将服务器端的内容根据指定的dataType转换类型，并传值给success回调函数
                         $.ajax({
                              accepts: {
                                mycustomtype: 'application/x-some-custom-type'
                              },

                              // Expect a `mycustomtype` back from server
                              dataType: 'mycustomtype'

                              // Instructions for how to deserialize a `mycustomtype`
                              converters: {
                                'text mycustomtype': function(result) {
                                  // Do Stuff
                                  return newresult;
                                }
                              },
                            });
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


创建多对多：
方式一：自定义关系表
class Host(models.Model):
    nid = models.BigAutoField(primary_key=True)
    hostname = models.CharField(max_length=64, db_index=True)
    ip = models.GenericIPAddressField(protocol='ipv4', db_index=True)
    port = models.IntegerField()
    b = models.ForeignKey(to='Business', to_field='id', on_delete=models.SET_NULL, null=True)

class Application(models.Model):
    name = models.CharField(max_length=64)

class HostToApp(models.Model):
    h_obj = models.ForeignKey(to='Host', to_field='nid', on_delete=models.CASCADE)
    a_obj = models.ForeignKey(to='Application', to_field='id', on_delete=models.CASCADE)
方式二：自动创建关联关系表,   缺点是不能够自己定制

class Host(models.Model):
    nid = models.BigAutoField(primary_key=True)
    hostname = models.CharField(max_length=64, db_index=True)
    ip = models.GenericIPAddressField(protocol='ipv4', db_index=True)
    port = models.IntegerField()
    b = models.ForeignKey(to='Business', to_field='id', on_delete=models.SET_NULL, null=True)

class Application(models.Model):
    name = models.CharField(max_length=64)
    r = models.ManyToManyField(to='Host')


    无法直接对第三张表进行操作

    ojb = Application.objects.get(id=1)
    obj.name
    obj.r.add(1) app(1)--host(1)
    obj.r.add(2) app(1)--host(2)
    obj.r.add(*[1, 2, 3, 4, 5])       (1,1) (1,2) (1,3) (1,4) (1,5)

    obj.r.remove(1)
    obj.r.remove(2)
    obj.r.remove(*[1, 2, 3, 4, 5])

    obj.r.clear() 清除所有app id 为1的关系
    obj.r.set([3, 5, 7]) 先清楚了所有app id为1的关系，然后创建 (1,3) (1,5) (1,7)


    获取
    ojb.r.------查询条件
            例如：
            obj.r.all() app对应的所有机器，里面是Host对象

